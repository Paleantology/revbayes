################################################################################
#
# RevBayes Validation Test: Felsenstein (81) with uniform time tree
# 
# Model: Sequences evolve under the Felsenstein (81) model and the tree is drawn
#        from a uniform time tree distribution. 
#            
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

#######################
# Reading in the Data #
#######################
# Import the morphological character matrix #
# this file contains only the taxa for which morphological characters are available #
morpho <- readDiscreteCharacterData("data/bears.nex")

## helpers
mvi = 1
mni = 1
taxa <- morpho.names()
n_taxa <- taxa.size()
n_branches <- 2 * n_taxa - 2



##############
# Tree model #
##############

phylogeny <- readTrees("data/bears.tre")[1]



###########################################
# Binary morphological substitution model #
###########################################

# Specify the number of categories we would like to use to describe our data. For simplicity,
# we will use 4.

n_cats = 4

# Specify the two parameters to the Beta distribution, and the moves on these parameters.
alpha_ofbeta ~ dnExponential( 0.1 )
beta_ofbeta  ~ dnExponential( 0.1 )
moves[mvi++] = mvScale(beta_ofbeta, lambda=1, weight=2.0 )
moves[mvi++] = mvScale(alpha_ofbeta,lambda=1, weight=2.0 )

# Create the Beta distribution, according to the two parameters and the number of categories.
cat_offset <- 1.0
cats := fnDiscretizeBeta(alpha_ofbeta + cat_offset, beta_ofbeta + cat_offset, n_cats)

# Create the Q matrices. These data are binary, so we initialize the Jukes-Cantor matrix with
# two states. The matrix is initialized from the median values of out four quantiles from
# the Beta.

for (i in 1:cats.size())
{
    Q[i] := fnF81(simplex(abs(1-cats[i]), cats[i]))
}

# Tell the model what the probability of a character going into any particular category. 
# This prior says that a character is equally likely to be put into any category.

matrix_probs ~ dnDirichlet( rep(1,n_cats) )
moves[mvi++] = mvSimplexElementScale(matrix_probs, alpha=10, weight=4.0) 


# Set up Gamma-distributed rate variation.
alpha_morpho ~ dnExponential( 1.0 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Moves on the parameters to the Gamma distribution.
moves[mvi++] = mvScale(alpha_morpho,lambda=1, weight=2.0)

#Combine all of our elements into a CTMC. Because we have not observed any invariant sites, 
# we specify the coding is 'variable'.

#phyMorpho ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q, type="Standard", coding="variable", siteMatrices=matrix_probs)
phyMorpho ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q, type="Standard", siteMatrices=matrix_probs)
phyMorpho.clamp(morpho)




# initialize the model object #
mymodel = model(phylogeny)


monitors[1] = mnModel(filename="output/bears_mk.log",printgen=10, separator = TAB)

mymcmc = mcmc(mymodel, monitors, moves)

validation = validationAnalysis( mymcmc, 1000 )
validation.burnin(generations=3000,tuningInterval=250)
validation.run(generations=10000)
validation.summarize()


# you may want to quit RevBayes now
q()

