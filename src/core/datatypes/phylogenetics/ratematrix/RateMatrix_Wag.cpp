/**
 * @file
 * This file contains the implementation of RateMatrix_Wag, which is
 * class that holds a rate matrix in RevBayes.
 *
 * @brief Implementation of RateMatrix_Wag
 *
 * (c) Copyright 2009- under GPL version 3
 * @date Last modified: $Date: 2012-12-11 14:46:24 +0100 (Tue, 11 Dec 2012) $
 * @author The RevBayes Development Core Team
 * @license GPL version 3
 * @version 1.0
 * @since 2009-08-27, version 1.0
 * @interface Mcmc
 * @package distributions
 *
 * $Id: RateMatrix_Wag.cpp 1921 2012-12-11 13:46:24Z hoehna $
 */

#include "RateMatrix_Wag.h"
#include "RbException.h"
#include "RbMathMatrix.h"
#include "TransitionProbabilityMatrix.h"


using namespace RevBayesCore;

/** Construct rate matrix with n states */
RateMatrix_Wag::RateMatrix_Wag( void ) : RateMatrix_Empirical( 20 ){
    
    // WAG definition: https://www.ebi.ac.uk/goldman-srv/WAG/wag.dat
    
    /* WAG stationary frequencies */
    
    std::vector<double> sf_init{
        0.08627900, 0.04397200, 0.03908940, 0.05704510, 0.01930780,
        0.03672810, 0.05805890, 0.08325180, 0.02443130, 0.04846600,
        0.08620970, 0.06202860, 0.01950273, 0.03843190, 0.04576310,
        0.06951790, 0.06101270, 0.01438590, 0.03527420, 0.07089560
    };
    stationary_freqs = sf_init;
    
    /* WAG exchangeability rates */
    
    std::vector<double> er_init{
        0.55157100, 0.50984800, 0.73899800, 1.02704000, 0.90859800,
        1.58285000, 1.41672000, 0.31695400, 0.19333500, 0.39791500,
        0.90626500, 0.89349600, 0.21049400, 1.43855000, 3.37079000,
        2.12111000, 0.11313300, 0.24073500, 2.00601000, 0.63534600,
        0.14730400, 0.52819100, 3.03550000, 0.43915700, 0.58466500,
        2.13715000, 0.18697900, 0.49767100, 5.35142000, 0.68316200,
        0.10271100, 0.67948900, 1.22419000, 0.55441300, 1.16392000,
        0.38153300, 0.25184900, 5.42942000, 0.26525600, 1.54364000,
        0.94719800, 1.12556000, 3.95629000, 0.55423600, 0.13152800,
        3.01201000, 0.19822100, 0.09616210, 0.19508100, 3.97423000,
        2.03006000, 0.07191670, 1.08600000, 0.19624600, 0.03029490,
        0.61678300, 6.17416000, 0.86558400, 0.93067600, 0.03943700,
        0.08480470, 0.47985500, 0.10375400, 0.04673040, 0.42398400,
        1.07176000, 0.37486600, 0.12976700, 0.32571100, 0.15233500,
        0.09881790, 0.02135200, 0.30667400, 0.24897200, 0.17013500,
        0.38428700, 0.07403390, 0.39048200, 0.39802000, 0.10940400,
        1.40766000, 0.51298400, 0.71707000, 0.54383300, 1.00214000,
        5.46947000, 0.33005200, 4.29411000, 0.11391700, 0.86948900,
        3.89490000, 1.54526000, 0.09992080, 0.93337200, 1.02887000,
        0.85792800, 0.21573700, 0.22771000, 0.30128100, 0.56771700,
        0.57002500, 0.12739500, 0.15426300, 2.58443000, 0.31512400,
        0.08113390, 0.68235500, 0.70493900, 0.82276500, 0.15655700,
        0.19630300, 0.58873100, 0.24941000, 0.03045010, 0.06130370,
        0.37355800, 0.17410000, 0.04993100, 0.24357000, 1.34182000,
        0.22583300, 0.33698300, 0.10360400, 0.18724700, 0.13819000,
        0.49946200, 0.89043200, 0.40414100, 0.67937100, 0.69619800,
        0.74016900, 0.47330700, 0.26256900, 3.87344000, 0.11835800,
        3.17097000, 0.32383200, 4.25746000, 1.05947000, 0.09992880,
        0.31944000, 1.45816000, 0.21248300, 0.42017000, 7.82130000,
        0.25755500, 4.85402000, 2.11517000, 0.41584400, 0.34473900,
        0.32662200, 0.66530900, 0.39861800, 1.80034000, 0.93427600,
        0.08883600, 0.55689600, 0.96713000, 1.38698000, 0.13750500,
        0.13326400, 0.30543400, 1.19063000, 0.17132900, 0.49390500,
        1.51612000, 0.51570600, 0.42843700, 2.05845000, 0.16144400,
        0.54593100, 0.17190300, 1.52964000, 6.45428000, 0.64989200, 
        1.61328000, 0.79538400, 0.13940500, 0.21604600, 0.31488700, 
        4.37802000, 0.52374200, 0.78699300, 0.23273900, 0.11086400, 
        0.29114800, 1.38823000, 2.48539000, 0.36536900, 0.31473000
    };
    exchangeability_rates = er_init;
    
    // compute the off-diagonal values
    computeOffDiagonal();
    
    // set the diagonal values
    setDiagonal();
    
    // rescale 
    rescaleToAverageRate( 1.0 );
    
    // update the eigensystem
    updateEigenSystem();
    
}


/** Destructor */
RateMatrix_Wag::~RateMatrix_Wag(void) {
    
}




RateMatrix_Wag* RateMatrix_Wag::clone( void ) const {
    return new RateMatrix_Wag( *this );
}


